module mux8_1(
 input En,
 input [7:0]i,
 input [2:0] s,
 output Flag,
 output Y
 
);

wire x1;

assign x1 = s[2] ? (s[1] ? ( s[0] ? i[7] : i[6]) : (s[0] ? i[5] : i[4])) : (s[1]? (s[0] ? i[3] : i[2]) : ( s[0] ? i[1] : i[0] ));
assign Y = x1 & (~En) ;

assign Flag = ~En;

endmodule






module test_mux81;

reg [7:0]i;
reg [2:0]s;
reg En;

wire Flag;
wire Y;

mux8_1 uut(
 .i(i) , .s(s), .Y(Y) , .En(En), .Flag(Flag)
 );
 
 initial begin
 
 i = $random ; s= $random;
 #10;  i = $random ; s= $random; En = 1'b0;
 #10;  i = $random ; s= $random; En = 0;
 #10;  i = $random ; s= $random; En = 0;
 #10;  i = $random ; s= $random; En = 0;
 #10;  i = $random ; s= $random; En = 0;
 #10;  i = $random ; s= $random; En = 1;
 #10;  i = $random ; s= $random; En = 0;
 #10;  i = $random ; s= $random; En = 0;
 #10;  i = $random ; s= $random; En = 0;
 #10;  i = $random ; s= $random; En = 1;
 #10;  i = $random ; s= $random; En = 1;
 
 end 
 endmodule
        
      
   
 

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 26.08.2022 03:43:07
// Design Name: 
// Module Name: 4_adder_subtractor
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module adder_subtractor(
   input [3:0] A,
   input [3:0] B,
   input AS,
   output [3:0]S,
   output C

    );
    
    wire c1,c2,c3,c0;
    wire B0, B1, B2, B3;
    
    xor(B0, B[0] , AS);
    xor(B1, B[1] , AS);
    xor(B2, B[2] , AS);
    xor(B3, B[3] , AS);
    
    assign c0 = AS;
    
    full_adder fa0(A[0],B0,c0,S[0],c1);
    full_adder fa1(A[1],B1,c1,S[1],c2);
    full_adder fa2(A[2],B2,c2,S[2],c3);
    full_adder fa3(A[3],B3,c3,S[3],C);
    
      
    
endmodule





module full_adder(
    input A,
    input B,
    input Cin,
    output S,
    output Cout
    );
    
assign S = A ^ B ^ Cin;
assign Cout = (A & B) | (A & Cin) | ( B & Cin) ;
    
endmodule




module test_addsub;

reg [3:0]A;
reg [3:0]B;
reg AS;

wire [3:0]S;
wire C;

adder_subtractor uut(
  .A(A), .B(B), .AS(AS), .S(S), .C(C)
 
 );
 
 initial begin
 
 A = 4'b0000 ; B= 4'b0101; AS = 0;
 #10;  A = 0000 ; B= 0101;  AS = 0;
#10;  A = 0001 ; B= 0010; AS = 0;
#10;  A = 1000 ; B= 0001; AS = 1;
#10;  A = 1011 ; B= 0011; AS = 0;
#10;  A = 1111 ; B= 0000; AS = 1;
#10;  A = 1011 ; B= 0011; AS = 0;
#10;  A = 1000 ; B= 1000; AS = 1;
#10;  A = 0111 ; B= 0101; AS =  1;
#10;  A = 1001 ; B= 0001; AS = 1;
        
    
 
 end 
 endmodule
        