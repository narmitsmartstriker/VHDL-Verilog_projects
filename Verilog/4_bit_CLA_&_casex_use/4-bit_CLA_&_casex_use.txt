casex circuit

`timescale 1ns / 1ps


module TOP(A0, A1, Y);
 input [3:0] Y;
 output reg A0, A1;
    
    always @ (Y)
    begin
     casex (Y)
              4'b001x : A0 = 1'b1;
              4'b1xxx : A0=1'b1;
              default : A0=1'b0;
              
      endcase
       
       casex (Y)
              4'b01xx : A1 = 1'b1;
              4'b1xxx : A1=1'b1;
              default : A1=1'b0;
              endcase
    end   
endmodule
       

testbench

`timescale 1ns / 1ps


module test_TOP;

reg [3:0] Y;
wire A0, A1;



    
   TOP uut(
   .Y(Y), .A0(A0), .A1(A1)
   );
   
   initial begin
   
   Y = 4'b0000 ; 
   #10;   Y = 4'b0001 ; 
   #10;   Y = 4'b0010 ; 
   #10;   Y = 4'b0011 ; 
   #10;   Y = 4'b0100 ; 
   #10;   Y = 4'b0101 ; 
   #10;   Y = 4'b0110 ; 
   #10;   Y = 4'b0111; 
   #10;   Y = 4'b1000 ; 
   #10;   Y = 4'b1001 ; 
   #10;   Y = 4'b1010 ; 
   #10;   Y = 4'b1011 ; 
   #10;   Y = 4'b1100 ; 
   #10;   Y = 4'b1101 ; 
   #10;   Y = 4'b1110 ; 
   #10;   Y = 4'b1111 ; 
      
    end
    
endmodule




CLA Adder



code:

module CLA(
    input [3:0] a,
    input [3:0] b,
    input cin,
    output [3:0] sum,
    output cout
    );
    
    wire p0 ,p1, p2, p3, g0, g1, g2, g3, c1, c2, c3, c4;
    
     assign p0 = (a[0] ^ b[0]), p1 = (a[1] ^ b[1]), p2 = (a[2] ^ b[2]), p3 = (a[3] ^ b[3]);
    
     assign g0 = (a[0] & b[0]), g1 = (a[1] & b[1]), g2 = (a[2] & b[2]), g3 = (a[3] & b[3]);
     
     assign 
     c1 = (g0 | (p0 & cin)), 
     c2 = (g1 | ( p1 & g0) | ( p1 & p0 & cin)),
     c3 = (g2 |( p2 & g1) | (p2 &  p1 & g0) | ( p2 & p1 & p0 & cin)),
     c4 = (g3 | (p3 & g2) |( p3 & p2 & g1) | (p3 & p2 &  p1 & g0) | ( p3 & p2 & p1 & p0 & cin));
     
     assign 
      sum[0] = (p0 ^ cin),
      sum[1] =( p1 ^ c1),
      sum[2] = (p2 ^ c2),
      sum[3] =( p3 ^ c3);
      
     assign cout = c4;
     
     
      
endmodule


testbench



module test_CLA;
reg [3:0] a;
reg [3:0] b;
reg cin;

wire[3:0] sum;
wire cout;

CLA uut(
.a(a), .b(b), .cin(cin), .sum(sum), .cout(cout)
);

initial begin
a = 0; b = 0; cin = 0;
#100;
a = 2; b = 6; cin = 1;
#100;
a = 2; b = 4; cin = 0;
#100;
a = 1; b = 7; cin = 1;
#100;
a = 10; b = 22; cin = 0;
#100;

end
endmodule

       
      
      
    
   
    
    
   